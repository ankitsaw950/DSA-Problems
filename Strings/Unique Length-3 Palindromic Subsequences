// First way of doing this 

// Space Complexity : 26 size of storing the letter i.e O(1)
// Time Complexity : 
                    // main outer loop --> in worst case O(26)
                    // first inner loop to compute the index --> O(n)
                    // second inner loop for computing the unique characters --> O(n)

                    // Overall : O(n)

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n = s.length();

        unordered_set<char> letters;

        for (int i = 0; i < n; i++) {
            letters.insert(s[i]);
        }

        int result = 0;

        for (char letter : letters) {

            int left_idx = -1;
            int right_idx = -1;

            for (int i = 0; i < n; i++) {

                if (s[i] == letter) {

                    if (left_idx == -1) {
                        left_idx = i;
                    }

                    right_idx = i;
                }
            }

            unordered_set<char> st;    
            for (int middle = left_idx + 1; middle <= right_idx - 1; middle++) {
                st.insert(s[middle]);
            }

            result += st.size();
        }

        return result;
    }
};
--------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


// Second Way 

// In this we can calculate the indices of the charcter and store them in the  vector 

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n = s.length();

        vector<pair<int, int>> indices(26, {-1, -1});

        for (int i = 0; i < n; i++) {
            char ch = s[i];
            int idx = ch - 'a';

            if (indices[idx].first == -1) {
                indices[idx].first = i;
            }

            indices[idx].second = i;
        }

        int result = 0;

        for (int i = 0; i < 26; i++) {

            int left_idx = indices[i].first;
            int right_idx = indices[i].second;

            if (left_idx == -1)
                continue;

            unordered_set<char> st;
            for (int middle = left_idx + 1; middle <= right_idx - 1; middle++) {
                st.insert(s[middle]);
            }

            result += st.size();
        }

        return result;
    }
};
